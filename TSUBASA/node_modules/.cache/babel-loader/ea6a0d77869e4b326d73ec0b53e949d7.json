{"ast":null,"code":"var _jsxFileName = \"/Users/tsu/Login/login/src/components/Search.js\",\n    _s = $RefreshSig$();\n\n// SEARCH.JS(完全一致・filterで勝手に検索してくれる＝検索ボタンとか押さなくていい)\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n\n  //   const fruits =[\n  //     \"apple\",\n  //     \"banana\",\n  //     \"melon\",\n  //     \"pineapple\",\n  //     \"watermelon\",\n  //     \"mango\",\n  //     \"strawberry\",\n  //     \"tomato\"\n  //   ]\n  // onSubmitが走った時にfilterが走る\n  const [text, setText] = useState('');\n  const [result, setResult] = useState('');\n\n  const onChange = e => {\n    setText(e.target.value);\n  };\n\n  const handleSearch = e => {\n    e.preventDefault();\n    const fruitFilter = fruits.filter(fruit => {\n      return fruit === text;\n    });\n    setResult(fruitFilter); // ↑fruitとtextが同じだった場合の答え(returnの答え)をsetResultに入れてonSubmitが入ったときに変更する\n  }; // const onSubmit=e=>{\n  //   setText(text)\n  //   console.log('onSubmitが適用されました')\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearch,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: text,\n        type: \"text\",\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"ylRvCHscU9z2zY5Us+rLbCe/mQ0=\");\n\n_c = App;\nexport default App; // returnの使い方;\n// const OOOO　のポイントにその結果が入ったものを返す。\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/tsu/Login/login/src/components/Search.js"],"names":["React","useState","useEffect","App","text","setText","result","setResult","onChange","e","target","value","handleSearch","preventDefault","fruitFilter","fruits","filter","fruit"],"mappings":";;;AAAA;AAGA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;;;AAEA,OAAO,MAAMC,GAAG,GAAC,MAAI;AAAA;;AAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;AAEA,QAAK,CAACC,IAAD,EAAOC,OAAP,IAAgBJ,QAAQ,CAAC,EAAD,CAA7B;AACA,QAAK,CAACK,MAAD,EAASC,SAAT,IAAoBN,QAAQ,CAAC,EAAD,CAAjC;;AACA,QAAMO,QAAQ,GAAEC,CAAC,IAAE;AACjBJ,IAAAA,OAAO,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP;AACD,GAFD;;AAIA,QAAMC,YAAY,GAAEH,CAAC,IAAE;AACrBA,IAAAA,CAAC,CAACI,cAAF;AACA,UAAMC,WAAW,GAACC,MAAM,CAACC,MAAP,CAAcC,KAAK,IAAE;AACnC,aAAOA,KAAK,KAAGb,IAAf;AACD,KAFe,CAAlB;AAIAG,IAAAA,SAAS,CAACO,WAAD,CAAT,CANqB,CAOrB;AACD,GARD,CArBmB,CA+BnB;AAEA;AACA;AACA;;;AAGA,sBACE;AAAA,2BACA;AAAM,MAAA,QAAQ,EAAEF,YAAhB;AAAA,8BACE;AACE,QAAA,KAAK,EAAER,IADT;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,QAAQ,EAAEI;AAHZ;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAQE;AAAA,kBAAIF;AAAJ;AAAA;AAAA;AAAA;AAAA,cARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AAqBD,CA3DM;;GAAMH,G;;KAAAA,G;AA8Db,eAAeA,GAAf,C,CAGA;AACA","sourcesContent":["// SEARCH.JS(完全一致・filterで勝手に検索してくれる＝検索ボタンとか押さなくていい)\n\n\nimport './App.css';\nimport React,{useState, useEffect} from 'react'\n\nexport const App=()=>{\n\n//   const fruits =[\n//     \"apple\",\n//     \"banana\",\n//     \"melon\",\n//     \"pineapple\",\n//     \"watermelon\",\n//     \"mango\",\n//     \"strawberry\",\n//     \"tomato\"\n//   ]\n\n  // onSubmitが走った時にfilterが走る\n\n  const[text, setText]=useState('')\n  const[result, setResult]=useState('')\n  const onChange =e=>{\n    setText(e.target.value)\n  }\n\n  const handleSearch =e=>{\n    e.preventDefault();\n    const fruitFilter=fruits.filter(fruit=>{\n        return fruit===text\n      }\n    );\n    setResult(fruitFilter)\n    // ↑fruitとtextが同じだった場合の答え(returnの答え)をsetResultに入れてonSubmitが入ったときに変更する\n  }\n\n  // const onSubmit=e=>{\n    \n  //   setText(text)\n  //   console.log('onSubmitが適用されました')\n  // }\n\n\n  return (\n    <>\n    <form onSubmit={handleSearch}>\n      <input\n        value={text}\n        type='text'\n        onChange={onChange}\n      />\n\n      <button type='submit'>Search</button>\n      <p>{result}</p>\n    </form>\n\n\n    \n{/* \n    ↑フォーム内と結果表示画面を繋ぐには（この二つに限らず何かを繋ぐ場合は）、何かインターフェースとなるものが必要。\n    今回はtextというインターフェースで繋いだ。 */}\n    \n    </>\n  )\n}\n\n\nexport default App;\n\n\n// returnの使い方;\n// const OOOO　のポイントにその結果が入ったものを返す。"]},"metadata":{},"sourceType":"module"}